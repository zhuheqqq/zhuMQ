// Code generated by Kitex v0.10.1. DO NOT EDIT.

package server_operations

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "zhuMQ/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"push": kitex.NewMethodInfo(
		pushHandler,
		newServer_OperationsPushArgs,
		newServer_OperationsPushResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"pull": kitex.NewMethodInfo(
		pullHandler,
		newServer_OperationsPullArgs,
		newServer_OperationsPullResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"info": kitex.NewMethodInfo(
		infoHandler,
		newServer_OperationsInfoArgs,
		newServer_OperationsInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Sub": kitex.NewMethodInfo(
		subHandler,
		newServer_OperationsSubArgs,
		newServer_OperationsSubResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"StarttoGet": kitex.NewMethodInfo(
		starttoGetHandler,
		newServer_OperationsStarttoGetArgs,
		newServer_OperationsStarttoGetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	server_OperationsServiceInfo                = NewServiceInfo()
	server_OperationsServiceInfoForClient       = NewServiceInfoForClient()
	server_OperationsServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return server_OperationsServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return server_OperationsServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return server_OperationsServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "Server_Operations"
	handlerType := (*api.Server_Operations)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.1",
		Extra:           extra,
	}
	return svcInfo
}

func pushHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.Server_OperationsPushArgs)
	realResult := result.(*api.Server_OperationsPushResult)
	success, err := handler.(api.Server_Operations).Push(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServer_OperationsPushArgs() interface{} {
	return api.NewServer_OperationsPushArgs()
}

func newServer_OperationsPushResult() interface{} {
	return api.NewServer_OperationsPushResult()
}

func pullHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.Server_OperationsPullArgs)
	realResult := result.(*api.Server_OperationsPullResult)
	success, err := handler.(api.Server_Operations).Pull(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServer_OperationsPullArgs() interface{} {
	return api.NewServer_OperationsPullArgs()
}

func newServer_OperationsPullResult() interface{} {
	return api.NewServer_OperationsPullResult()
}

func infoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.Server_OperationsInfoArgs)
	realResult := result.(*api.Server_OperationsInfoResult)
	success, err := handler.(api.Server_Operations).Info(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServer_OperationsInfoArgs() interface{} {
	return api.NewServer_OperationsInfoArgs()
}

func newServer_OperationsInfoResult() interface{} {
	return api.NewServer_OperationsInfoResult()
}

func subHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.Server_OperationsSubArgs)
	realResult := result.(*api.Server_OperationsSubResult)
	success, err := handler.(api.Server_Operations).Sub(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServer_OperationsSubArgs() interface{} {
	return api.NewServer_OperationsSubArgs()
}

func newServer_OperationsSubResult() interface{} {
	return api.NewServer_OperationsSubResult()
}

func starttoGetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.Server_OperationsStarttoGetArgs)
	realResult := result.(*api.Server_OperationsStarttoGetResult)
	success, err := handler.(api.Server_Operations).StarttoGet(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServer_OperationsStarttoGetArgs() interface{} {
	return api.NewServer_OperationsStarttoGetArgs()
}

func newServer_OperationsStarttoGetResult() interface{} {
	return api.NewServer_OperationsStarttoGetResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Push(ctx context.Context, req *api.PushRequest) (r *api.PushResponse, err error) {
	var _args api.Server_OperationsPushArgs
	_args.Req = req
	var _result api.Server_OperationsPushResult
	if err = p.c.Call(ctx, "push", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Pull(ctx context.Context, req *api.PullRequest) (r *api.PullResponse, err error) {
	var _args api.Server_OperationsPullArgs
	_args.Req = req
	var _result api.Server_OperationsPullResult
	if err = p.c.Call(ctx, "pull", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Info(ctx context.Context, req *api.InfoRequest) (r *api.InfoResponse, err error) {
	var _args api.Server_OperationsInfoArgs
	_args.Req = req
	var _result api.Server_OperationsInfoResult
	if err = p.c.Call(ctx, "info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Sub(ctx context.Context, req *api.SubRequest) (r *api.SubResponse, err error) {
	var _args api.Server_OperationsSubArgs
	_args.Req = req
	var _result api.Server_OperationsSubResult
	if err = p.c.Call(ctx, "Sub", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StarttoGet(ctx context.Context, req *api.InfoGetRequest) (r *api.InfoGetResponse, err error) {
	var _args api.Server_OperationsStarttoGetArgs
	_args.Req = req
	var _result api.Server_OperationsStarttoGetResult
	if err = p.c.Call(ctx, "StarttoGet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
