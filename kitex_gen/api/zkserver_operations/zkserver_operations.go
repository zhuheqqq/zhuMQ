// Code generated by Kitex v0.10.1. DO NOT EDIT.

package zkserver_operations

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "zhuMQ/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"BroInfo": kitex.NewMethodInfo(
		broInfoHandler,
		newZkServer_OperationsBroInfoArgs,
		newZkServer_OperationsBroInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ProGetBroker": kitex.NewMethodInfo(
		proGetBrokerHandler,
		newZkServer_OperationsProGetBrokerArgs,
		newZkServer_OperationsProGetBrokerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ConGetBroker": kitex.NewMethodInfo(
		conGetBrokerHandler,
		newZkServer_OperationsConGetBrokerArgs,
		newZkServer_OperationsConGetBrokerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BroGetConfig": kitex.NewMethodInfo(
		broGetConfigHandler,
		newZkServer_OperationsBroGetConfigArgs,
		newZkServer_OperationsBroGetConfigResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	zkServer_OperationsServiceInfo                = NewServiceInfo()
	zkServer_OperationsServiceInfoForClient       = NewServiceInfoForClient()
	zkServer_OperationsServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return zkServer_OperationsServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return zkServer_OperationsServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return zkServer_OperationsServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ZkServer_Operations"
	handlerType := (*api.ZkServer_Operations)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.1",
		Extra:           extra,
	}
	return svcInfo
}

func broInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsBroInfoArgs)
	realResult := result.(*api.ZkServer_OperationsBroInfoResult)
	success, err := handler.(api.ZkServer_Operations).BroInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsBroInfoArgs() interface{} {
	return api.NewZkServer_OperationsBroInfoArgs()
}

func newZkServer_OperationsBroInfoResult() interface{} {
	return api.NewZkServer_OperationsBroInfoResult()
}

func proGetBrokerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsProGetBrokerArgs)
	realResult := result.(*api.ZkServer_OperationsProGetBrokerResult)
	success, err := handler.(api.ZkServer_Operations).ProGetBroker(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsProGetBrokerArgs() interface{} {
	return api.NewZkServer_OperationsProGetBrokerArgs()
}

func newZkServer_OperationsProGetBrokerResult() interface{} {
	return api.NewZkServer_OperationsProGetBrokerResult()
}

func conGetBrokerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsConGetBrokerArgs)
	realResult := result.(*api.ZkServer_OperationsConGetBrokerResult)
	success, err := handler.(api.ZkServer_Operations).ConGetBroker(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsConGetBrokerArgs() interface{} {
	return api.NewZkServer_OperationsConGetBrokerArgs()
}

func newZkServer_OperationsConGetBrokerResult() interface{} {
	return api.NewZkServer_OperationsConGetBrokerResult()
}

func broGetConfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsBroGetConfigArgs)
	realResult := result.(*api.ZkServer_OperationsBroGetConfigResult)
	success, err := handler.(api.ZkServer_Operations).BroGetConfig(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsBroGetConfigArgs() interface{} {
	return api.NewZkServer_OperationsBroGetConfigArgs()
}

func newZkServer_OperationsBroGetConfigResult() interface{} {
	return api.NewZkServer_OperationsBroGetConfigResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BroInfo(ctx context.Context, req *api.BroInfoRequest) (r *api.BroInfoResponse, err error) {
	var _args api.ZkServer_OperationsBroInfoArgs
	_args.Req = req
	var _result api.ZkServer_OperationsBroInfoResult
	if err = p.c.Call(ctx, "BroInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProGetBroker(ctx context.Context, req *api.ProGetBrokRequest) (r *api.ProGetBrokResponse, err error) {
	var _args api.ZkServer_OperationsProGetBrokerArgs
	_args.Req = req
	var _result api.ZkServer_OperationsProGetBrokerResult
	if err = p.c.Call(ctx, "ProGetBroker", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ConGetBroker(ctx context.Context, req *api.ConGetBrokRequest) (r *api.ConGetBrokResponse, err error) {
	var _args api.ZkServer_OperationsConGetBrokerArgs
	_args.Req = req
	var _result api.ZkServer_OperationsConGetBrokerResult
	if err = p.c.Call(ctx, "ConGetBroker", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BroGetConfig(ctx context.Context, req *api.BroGetConfigRequest) (r *api.BroGetConfigResponse, err error) {
	var _args api.ZkServer_OperationsBroGetConfigArgs
	_args.Req = req
	var _result api.ZkServer_OperationsBroGetConfigResult
	if err = p.c.Call(ctx, "BroGetConfig", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
