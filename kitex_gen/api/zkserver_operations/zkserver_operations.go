// Code generated by Kitex v0.10.1. DO NOT EDIT.

package zkserver_operations

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "zhuMQ/kitex_gen/api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Sub": kitex.NewMethodInfo(
		subHandler,
		newZkServer_OperationsSubArgs,
		newZkServer_OperationsSubResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateTopic": kitex.NewMethodInfo(
		createTopicHandler,
		newZkServer_OperationsCreateTopicArgs,
		newZkServer_OperationsCreateTopicResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreatePart": kitex.NewMethodInfo(
		createPartHandler,
		newZkServer_OperationsCreatePartArgs,
		newZkServer_OperationsCreatePartResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetPartitionState": kitex.NewMethodInfo(
		setPartitionStateHandler,
		newZkServer_OperationsSetPartitionStateArgs,
		newZkServer_OperationsSetPartitionStateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BroInfo": kitex.NewMethodInfo(
		broInfoHandler,
		newZkServer_OperationsBroInfoArgs,
		newZkServer_OperationsBroInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateOffset": kitex.NewMethodInfo(
		updateOffsetHandler,
		newZkServer_OperationsUpdateOffsetArgs,
		newZkServer_OperationsUpdateOffsetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ProGetBroker": kitex.NewMethodInfo(
		proGetBrokerHandler,
		newZkServer_OperationsProGetBrokerArgs,
		newZkServer_OperationsProGetBrokerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ConStartGetBroker": kitex.NewMethodInfo(
		conStartGetBrokerHandler,
		newZkServer_OperationsConStartGetBrokerArgs,
		newZkServer_OperationsConStartGetBrokerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BroGetConfig": kitex.NewMethodInfo(
		broGetConfigHandler,
		newZkServer_OperationsBroGetConfigArgs,
		newZkServer_OperationsBroGetConfigResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	zkServer_OperationsServiceInfo                = NewServiceInfo()
	zkServer_OperationsServiceInfoForClient       = NewServiceInfoForClient()
	zkServer_OperationsServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return zkServer_OperationsServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return zkServer_OperationsServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return zkServer_OperationsServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ZkServer_Operations"
	handlerType := (*api.ZkServer_Operations)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.1",
		Extra:           extra,
	}
	return svcInfo
}

func subHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsSubArgs)
	realResult := result.(*api.ZkServer_OperationsSubResult)
	success, err := handler.(api.ZkServer_Operations).Sub(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsSubArgs() interface{} {
	return api.NewZkServer_OperationsSubArgs()
}

func newZkServer_OperationsSubResult() interface{} {
	return api.NewZkServer_OperationsSubResult()
}

func createTopicHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsCreateTopicArgs)
	realResult := result.(*api.ZkServer_OperationsCreateTopicResult)
	success, err := handler.(api.ZkServer_Operations).CreateTopic(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsCreateTopicArgs() interface{} {
	return api.NewZkServer_OperationsCreateTopicArgs()
}

func newZkServer_OperationsCreateTopicResult() interface{} {
	return api.NewZkServer_OperationsCreateTopicResult()
}

func createPartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsCreatePartArgs)
	realResult := result.(*api.ZkServer_OperationsCreatePartResult)
	success, err := handler.(api.ZkServer_Operations).CreatePart(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsCreatePartArgs() interface{} {
	return api.NewZkServer_OperationsCreatePartArgs()
}

func newZkServer_OperationsCreatePartResult() interface{} {
	return api.NewZkServer_OperationsCreatePartResult()
}

func setPartitionStateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsSetPartitionStateArgs)
	realResult := result.(*api.ZkServer_OperationsSetPartitionStateResult)
	success, err := handler.(api.ZkServer_Operations).SetPartitionState(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsSetPartitionStateArgs() interface{} {
	return api.NewZkServer_OperationsSetPartitionStateArgs()
}

func newZkServer_OperationsSetPartitionStateResult() interface{} {
	return api.NewZkServer_OperationsSetPartitionStateResult()
}

func broInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsBroInfoArgs)
	realResult := result.(*api.ZkServer_OperationsBroInfoResult)
	success, err := handler.(api.ZkServer_Operations).BroInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsBroInfoArgs() interface{} {
	return api.NewZkServer_OperationsBroInfoArgs()
}

func newZkServer_OperationsBroInfoResult() interface{} {
	return api.NewZkServer_OperationsBroInfoResult()
}

func updateOffsetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsUpdateOffsetArgs)
	realResult := result.(*api.ZkServer_OperationsUpdateOffsetResult)
	success, err := handler.(api.ZkServer_Operations).UpdateOffset(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsUpdateOffsetArgs() interface{} {
	return api.NewZkServer_OperationsUpdateOffsetArgs()
}

func newZkServer_OperationsUpdateOffsetResult() interface{} {
	return api.NewZkServer_OperationsUpdateOffsetResult()
}

func proGetBrokerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsProGetBrokerArgs)
	realResult := result.(*api.ZkServer_OperationsProGetBrokerResult)
	success, err := handler.(api.ZkServer_Operations).ProGetBroker(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsProGetBrokerArgs() interface{} {
	return api.NewZkServer_OperationsProGetBrokerArgs()
}

func newZkServer_OperationsProGetBrokerResult() interface{} {
	return api.NewZkServer_OperationsProGetBrokerResult()
}

func conStartGetBrokerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsConStartGetBrokerArgs)
	realResult := result.(*api.ZkServer_OperationsConStartGetBrokerResult)
	success, err := handler.(api.ZkServer_Operations).ConStartGetBroker(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsConStartGetBrokerArgs() interface{} {
	return api.NewZkServer_OperationsConStartGetBrokerArgs()
}

func newZkServer_OperationsConStartGetBrokerResult() interface{} {
	return api.NewZkServer_OperationsConStartGetBrokerResult()
}

func broGetConfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ZkServer_OperationsBroGetConfigArgs)
	realResult := result.(*api.ZkServer_OperationsBroGetConfigResult)
	success, err := handler.(api.ZkServer_Operations).BroGetConfig(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newZkServer_OperationsBroGetConfigArgs() interface{} {
	return api.NewZkServer_OperationsBroGetConfigArgs()
}

func newZkServer_OperationsBroGetConfigResult() interface{} {
	return api.NewZkServer_OperationsBroGetConfigResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Sub(ctx context.Context, req *api.SubRequest) (r *api.SubResponse, err error) {
	var _args api.ZkServer_OperationsSubArgs
	_args.Req = req
	var _result api.ZkServer_OperationsSubResult
	if err = p.c.Call(ctx, "Sub", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateTopic(ctx context.Context, req *api.CreateTopicRequest) (r *api.CreateTopicResponse, err error) {
	var _args api.ZkServer_OperationsCreateTopicArgs
	_args.Req = req
	var _result api.ZkServer_OperationsCreateTopicResult
	if err = p.c.Call(ctx, "CreateTopic", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePart(ctx context.Context, req *api.CreatePartRequest) (r *api.CreatePartResponse, err error) {
	var _args api.ZkServer_OperationsCreatePartArgs
	_args.Req = req
	var _result api.ZkServer_OperationsCreatePartResult
	if err = p.c.Call(ctx, "CreatePart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetPartitionState(ctx context.Context, req *api.SetPartitionStateRequest) (r *api.SetPartitionStateResponse, err error) {
	var _args api.ZkServer_OperationsSetPartitionStateArgs
	_args.Req = req
	var _result api.ZkServer_OperationsSetPartitionStateResult
	if err = p.c.Call(ctx, "SetPartitionState", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BroInfo(ctx context.Context, req *api.BroInfoRequest) (r *api.BroInfoResponse, err error) {
	var _args api.ZkServer_OperationsBroInfoArgs
	_args.Req = req
	var _result api.ZkServer_OperationsBroInfoResult
	if err = p.c.Call(ctx, "BroInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOffset(ctx context.Context, req *api.UpdateOffsetRequest) (r *api.UpdateOffsetResponse, err error) {
	var _args api.ZkServer_OperationsUpdateOffsetArgs
	_args.Req = req
	var _result api.ZkServer_OperationsUpdateOffsetResult
	if err = p.c.Call(ctx, "UpdateOffset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProGetBroker(ctx context.Context, req *api.ProGetBrokRequest) (r *api.ProGetBrokResponse, err error) {
	var _args api.ZkServer_OperationsProGetBrokerArgs
	_args.Req = req
	var _result api.ZkServer_OperationsProGetBrokerResult
	if err = p.c.Call(ctx, "ProGetBroker", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ConStartGetBroker(ctx context.Context, req *api.ConStartGetBrokRequest) (r *api.ConStartGetBrokResponse, err error) {
	var _args api.ZkServer_OperationsConStartGetBrokerArgs
	_args.Req = req
	var _result api.ZkServer_OperationsConStartGetBrokerResult
	if err = p.c.Call(ctx, "ConStartGetBroker", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BroGetConfig(ctx context.Context, req *api.BroGetConfigRequest) (r *api.BroGetConfigResponse, err error) {
	var _args api.ZkServer_OperationsBroGetConfigArgs
	_args.Req = req
	var _result api.ZkServer_OperationsBroGetConfigResult
	if err = p.c.Call(ctx, "BroGetConfig", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
