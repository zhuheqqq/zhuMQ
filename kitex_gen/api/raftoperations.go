// Code generated by thriftgo (0.3.14). DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type RequestVoteArgs_ struct {
	Term         int8   `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
	CandidateId  int8   `thrift:"CandidateId,2" frugal:"2,default,i8" json:"CandidateId"`
	LastLogIndex int8   `thrift:"LastLogIndex,3" frugal:"3,default,i8" json:"LastLogIndex"`
	LastLogIterm int8   `thrift:"LastLogIterm,4" frugal:"4,default,i8" json:"LastLogIterm"`
	TopicName    string `thrift:"TopicName,5" frugal:"5,default,string" json:"TopicName"`
	PartName     string `thrift:"PartName,6" frugal:"6,default,string" json:"PartName"`
}

func NewRequestVoteArgs_() *RequestVoteArgs_ {
	return &RequestVoteArgs_{}
}

func (p *RequestVoteArgs_) InitDefault() {
}

func (p *RequestVoteArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *RequestVoteArgs_) GetCandidateId() (v int8) {
	return p.CandidateId
}

func (p *RequestVoteArgs_) GetLastLogIndex() (v int8) {
	return p.LastLogIndex
}

func (p *RequestVoteArgs_) GetLastLogIterm() (v int8) {
	return p.LastLogIterm
}

func (p *RequestVoteArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *RequestVoteArgs_) GetPartName() (v string) {
	return p.PartName
}
func (p *RequestVoteArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *RequestVoteArgs_) SetCandidateId(val int8) {
	p.CandidateId = val
}
func (p *RequestVoteArgs_) SetLastLogIndex(val int8) {
	p.LastLogIndex = val
}
func (p *RequestVoteArgs_) SetLastLogIterm(val int8) {
	p.LastLogIterm = val
}
func (p *RequestVoteArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *RequestVoteArgs_) SetPartName(val string) {
	p.PartName = val
}

var fieldIDToName_RequestVoteArgs_ = map[int16]string{
	1: "Term",
	2: "CandidateId",
	3: "LastLogIndex",
	4: "LastLogIterm",
	5: "TopicName",
	6: "PartName",
}

func (p *RequestVoteArgs_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RequestVoteArgs_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RequestVoteArgs_) ReadField1(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *RequestVoteArgs_) ReadField2(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CandidateId = _field
	return nil
}
func (p *RequestVoteArgs_) ReadField3(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LastLogIndex = _field
	return nil
}
func (p *RequestVoteArgs_) ReadField4(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LastLogIterm = _field
	return nil
}
func (p *RequestVoteArgs_) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TopicName = _field
	return nil
}
func (p *RequestVoteArgs_) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartName = _field
	return nil
}

func (p *RequestVoteArgs_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RequestVoteArgs"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Term", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CandidateId", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.CandidateId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LastLogIndex", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LastLogIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LastLogIterm", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LastLogIterm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TopicName", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TopicName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *RequestVoteArgs_) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PartName", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PartName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *RequestVoteArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestVoteArgs_(%+v)", *p)

}

func (p *RequestVoteArgs_) DeepEqual(ano *RequestVoteArgs_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.CandidateId) {
		return false
	}
	if !p.Field3DeepEqual(ano.LastLogIndex) {
		return false
	}
	if !p.Field4DeepEqual(ano.LastLogIterm) {
		return false
	}
	if !p.Field5DeepEqual(ano.TopicName) {
		return false
	}
	if !p.Field6DeepEqual(ano.PartName) {
		return false
	}
	return true
}

func (p *RequestVoteArgs_) Field1DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *RequestVoteArgs_) Field2DeepEqual(src int8) bool {

	if p.CandidateId != src {
		return false
	}
	return true
}
func (p *RequestVoteArgs_) Field3DeepEqual(src int8) bool {

	if p.LastLogIndex != src {
		return false
	}
	return true
}
func (p *RequestVoteArgs_) Field4DeepEqual(src int8) bool {

	if p.LastLogIterm != src {
		return false
	}
	return true
}
func (p *RequestVoteArgs_) Field5DeepEqual(src string) bool {

	if strings.Compare(p.TopicName, src) != 0 {
		return false
	}
	return true
}
func (p *RequestVoteArgs_) Field6DeepEqual(src string) bool {

	if strings.Compare(p.PartName, src) != 0 {
		return false
	}
	return true
}

type RequestVoteReply struct {
	VoteGranted bool `thrift:"VoteGranted,1" frugal:"1,default,bool" json:"VoteGranted"`
	Term        int8 `thrift:"Term,2" frugal:"2,default,i8" json:"Term"`
}

func NewRequestVoteReply() *RequestVoteReply {
	return &RequestVoteReply{}
}

func (p *RequestVoteReply) InitDefault() {
}

func (p *RequestVoteReply) GetVoteGranted() (v bool) {
	return p.VoteGranted
}

func (p *RequestVoteReply) GetTerm() (v int8) {
	return p.Term
}
func (p *RequestVoteReply) SetVoteGranted(val bool) {
	p.VoteGranted = val
}
func (p *RequestVoteReply) SetTerm(val int8) {
	p.Term = val
}

var fieldIDToName_RequestVoteReply = map[int16]string{
	1: "VoteGranted",
	2: "Term",
}

func (p *RequestVoteReply) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RequestVoteReply[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RequestVoteReply) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VoteGranted = _field
	return nil
}
func (p *RequestVoteReply) ReadField2(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}

func (p *RequestVoteReply) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RequestVoteReply"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RequestVoteReply) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VoteGranted", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.VoteGranted); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RequestVoteReply) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Term", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RequestVoteReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestVoteReply(%+v)", *p)

}

func (p *RequestVoteReply) DeepEqual(ano *RequestVoteReply) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VoteGranted) {
		return false
	}
	if !p.Field2DeepEqual(ano.Term) {
		return false
	}
	return true
}

func (p *RequestVoteReply) Field1DeepEqual(src bool) bool {

	if p.VoteGranted != src {
		return false
	}
	return true
}
func (p *RequestVoteReply) Field2DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}

type AppendEntriesArgs_ struct {
	Term         int8   `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
	LeaderId     int8   `thrift:"LeaderId,2" frugal:"2,default,i8" json:"LeaderId"`
	PrevLogIndex int8   `thrift:"PrevLogIndex,3" frugal:"3,default,i8" json:"PrevLogIndex"`
	PrevLogIterm int8   `thrift:"PrevLogIterm,4" frugal:"4,default,i8" json:"PrevLogIterm"`
	LeaderCommit int8   `thrift:"LeaderCommit,5" frugal:"5,default,i8" json:"LeaderCommit"`
	Entries      []byte `thrift:"Entries,6" frugal:"6,default,binary" json:"Entries"`
	TopicName    string `thrift:"TopicName,7" frugal:"7,default,string" json:"TopicName"`
	PartName     string `thrift:"PartName,8" frugal:"8,default,string" json:"PartName"`
}

func NewAppendEntriesArgs_() *AppendEntriesArgs_ {
	return &AppendEntriesArgs_{}
}

func (p *AppendEntriesArgs_) InitDefault() {
}

func (p *AppendEntriesArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *AppendEntriesArgs_) GetLeaderId() (v int8) {
	return p.LeaderId
}

func (p *AppendEntriesArgs_) GetPrevLogIndex() (v int8) {
	return p.PrevLogIndex
}

func (p *AppendEntriesArgs_) GetPrevLogIterm() (v int8) {
	return p.PrevLogIterm
}

func (p *AppendEntriesArgs_) GetLeaderCommit() (v int8) {
	return p.LeaderCommit
}

func (p *AppendEntriesArgs_) GetEntries() (v []byte) {
	return p.Entries
}

func (p *AppendEntriesArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *AppendEntriesArgs_) GetPartName() (v string) {
	return p.PartName
}
func (p *AppendEntriesArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *AppendEntriesArgs_) SetLeaderId(val int8) {
	p.LeaderId = val
}
func (p *AppendEntriesArgs_) SetPrevLogIndex(val int8) {
	p.PrevLogIndex = val
}
func (p *AppendEntriesArgs_) SetPrevLogIterm(val int8) {
	p.PrevLogIterm = val
}
func (p *AppendEntriesArgs_) SetLeaderCommit(val int8) {
	p.LeaderCommit = val
}
func (p *AppendEntriesArgs_) SetEntries(val []byte) {
	p.Entries = val
}
func (p *AppendEntriesArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *AppendEntriesArgs_) SetPartName(val string) {
	p.PartName = val
}

var fieldIDToName_AppendEntriesArgs_ = map[int16]string{
	1: "Term",
	2: "LeaderId",
	3: "PrevLogIndex",
	4: "PrevLogIterm",
	5: "LeaderCommit",
	6: "Entries",
	7: "TopicName",
	8: "PartName",
}

func (p *AppendEntriesArgs_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendEntriesArgs_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendEntriesArgs_) ReadField1(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField2(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LeaderId = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField3(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PrevLogIndex = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField4(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PrevLogIterm = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField5(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LeaderCommit = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField6(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Entries = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TopicName = _field
	return nil
}
func (p *AppendEntriesArgs_) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartName = _field
	return nil
}

func (p *AppendEntriesArgs_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendEntriesArgs"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Term", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LeaderId", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LeaderId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PrevLogIndex", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.PrevLogIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PrevLogIterm", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.PrevLogIterm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LeaderCommit", thrift.BYTE, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LeaderCommit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Entries", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Entries)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TopicName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TopicName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *AppendEntriesArgs_) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PartName", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PartName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *AppendEntriesArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesArgs_(%+v)", *p)

}

func (p *AppendEntriesArgs_) DeepEqual(ano *AppendEntriesArgs_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.LeaderId) {
		return false
	}
	if !p.Field3DeepEqual(ano.PrevLogIndex) {
		return false
	}
	if !p.Field4DeepEqual(ano.PrevLogIterm) {
		return false
	}
	if !p.Field5DeepEqual(ano.LeaderCommit) {
		return false
	}
	if !p.Field6DeepEqual(ano.Entries) {
		return false
	}
	if !p.Field7DeepEqual(ano.TopicName) {
		return false
	}
	if !p.Field8DeepEqual(ano.PartName) {
		return false
	}
	return true
}

func (p *AppendEntriesArgs_) Field1DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field2DeepEqual(src int8) bool {

	if p.LeaderId != src {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field3DeepEqual(src int8) bool {

	if p.PrevLogIndex != src {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field4DeepEqual(src int8) bool {

	if p.PrevLogIterm != src {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field5DeepEqual(src int8) bool {

	if p.LeaderCommit != src {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field6DeepEqual(src []byte) bool {

	if bytes.Compare(p.Entries, src) != 0 {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field7DeepEqual(src string) bool {

	if strings.Compare(p.TopicName, src) != 0 {
		return false
	}
	return true
}
func (p *AppendEntriesArgs_) Field8DeepEqual(src string) bool {

	if strings.Compare(p.PartName, src) != 0 {
		return false
	}
	return true
}

type AppendEntriesReply struct {
	Success        bool `thrift:"Success,1" frugal:"1,default,bool" json:"Success"`
	Term           int8 `thrift:"Term,2" frugal:"2,default,i8" json:"Term"`
	Logterm        int8 `thrift:"Logterm,3" frugal:"3,default,i8" json:"Logterm"`
	Termfirstindex int8 `thrift:"Termfirstindex,4" frugal:"4,default,i8" json:"Termfirstindex"`
}

func NewAppendEntriesReply() *AppendEntriesReply {
	return &AppendEntriesReply{}
}

func (p *AppendEntriesReply) InitDefault() {
}

func (p *AppendEntriesReply) GetSuccess() (v bool) {
	return p.Success
}

func (p *AppendEntriesReply) GetTerm() (v int8) {
	return p.Term
}

func (p *AppendEntriesReply) GetLogterm() (v int8) {
	return p.Logterm
}

func (p *AppendEntriesReply) GetTermfirstindex() (v int8) {
	return p.Termfirstindex
}
func (p *AppendEntriesReply) SetSuccess(val bool) {
	p.Success = val
}
func (p *AppendEntriesReply) SetTerm(val int8) {
	p.Term = val
}
func (p *AppendEntriesReply) SetLogterm(val int8) {
	p.Logterm = val
}
func (p *AppendEntriesReply) SetTermfirstindex(val int8) {
	p.Termfirstindex = val
}

var fieldIDToName_AppendEntriesReply = map[int16]string{
	1: "Success",
	2: "Term",
	3: "Logterm",
	4: "Termfirstindex",
}

func (p *AppendEntriesReply) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendEntriesReply[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendEntriesReply) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Success = _field
	return nil
}
func (p *AppendEntriesReply) ReadField2(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *AppendEntriesReply) ReadField3(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Logterm = _field
	return nil
}
func (p *AppendEntriesReply) ReadField4(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Termfirstindex = _field
	return nil
}

func (p *AppendEntriesReply) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendEntriesReply"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendEntriesReply) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Success", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendEntriesReply) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Term", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendEntriesReply) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Logterm", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Logterm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppendEntriesReply) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Termfirstindex", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Termfirstindex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AppendEntriesReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesReply(%+v)", *p)

}

func (p *AppendEntriesReply) DeepEqual(ano *AppendEntriesReply) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	if !p.Field2DeepEqual(ano.Term) {
		return false
	}
	if !p.Field3DeepEqual(ano.Logterm) {
		return false
	}
	if !p.Field4DeepEqual(ano.Termfirstindex) {
		return false
	}
	return true
}

func (p *AppendEntriesReply) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}
func (p *AppendEntriesReply) Field2DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *AppendEntriesReply) Field3DeepEqual(src int8) bool {

	if p.Logterm != src {
		return false
	}
	return true
}
func (p *AppendEntriesReply) Field4DeepEqual(src int8) bool {

	if p.Termfirstindex != src {
		return false
	}
	return true
}

type SnapShotArgs_ struct {
	Term              int8   `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
	LeaderId          int8   `thrift:"LeaderId,2" frugal:"2,default,i8" json:"LeaderId"`
	LastIncludedIndex int8   `thrift:"LastIncludedIndex,3" frugal:"3,default,i8" json:"LastIncludedIndex"`
	LastIncludedTerm  int8   `thrift:"LastIncludedTerm,4" frugal:"4,default,i8" json:"LastIncludedTerm"`
	Log               []byte `thrift:"Log,5" frugal:"5,default,binary" json:"Log"`
	Snapshot          []byte `thrift:"Snapshot,6" frugal:"6,default,binary" json:"Snapshot"`
	TopicName         string `thrift:"TopicName,7" frugal:"7,default,string" json:"TopicName"`
	PartName          string `thrift:"PartName,8" frugal:"8,default,string" json:"PartName"`
}

func NewSnapShotArgs_() *SnapShotArgs_ {
	return &SnapShotArgs_{}
}

func (p *SnapShotArgs_) InitDefault() {
}

func (p *SnapShotArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *SnapShotArgs_) GetLeaderId() (v int8) {
	return p.LeaderId
}

func (p *SnapShotArgs_) GetLastIncludedIndex() (v int8) {
	return p.LastIncludedIndex
}

func (p *SnapShotArgs_) GetLastIncludedTerm() (v int8) {
	return p.LastIncludedTerm
}

func (p *SnapShotArgs_) GetLog() (v []byte) {
	return p.Log
}

func (p *SnapShotArgs_) GetSnapshot() (v []byte) {
	return p.Snapshot
}

func (p *SnapShotArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *SnapShotArgs_) GetPartName() (v string) {
	return p.PartName
}
func (p *SnapShotArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *SnapShotArgs_) SetLeaderId(val int8) {
	p.LeaderId = val
}
func (p *SnapShotArgs_) SetLastIncludedIndex(val int8) {
	p.LastIncludedIndex = val
}
func (p *SnapShotArgs_) SetLastIncludedTerm(val int8) {
	p.LastIncludedTerm = val
}
func (p *SnapShotArgs_) SetLog(val []byte) {
	p.Log = val
}
func (p *SnapShotArgs_) SetSnapshot(val []byte) {
	p.Snapshot = val
}
func (p *SnapShotArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *SnapShotArgs_) SetPartName(val string) {
	p.PartName = val
}

var fieldIDToName_SnapShotArgs_ = map[int16]string{
	1: "Term",
	2: "LeaderId",
	3: "LastIncludedIndex",
	4: "LastIncludedTerm",
	5: "Log",
	6: "Snapshot",
	7: "TopicName",
	8: "PartName",
}

func (p *SnapShotArgs_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SnapShotArgs_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SnapShotArgs_) ReadField1(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}
func (p *SnapShotArgs_) ReadField2(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LeaderId = _field
	return nil
}
func (p *SnapShotArgs_) ReadField3(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LastIncludedIndex = _field
	return nil
}
func (p *SnapShotArgs_) ReadField4(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LastIncludedTerm = _field
	return nil
}
func (p *SnapShotArgs_) ReadField5(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Log = _field
	return nil
}
func (p *SnapShotArgs_) ReadField6(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Snapshot = _field
	return nil
}
func (p *SnapShotArgs_) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TopicName = _field
	return nil
}
func (p *SnapShotArgs_) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartName = _field
	return nil
}

func (p *SnapShotArgs_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SnapShotArgs"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SnapShotArgs_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Term", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SnapShotArgs_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LeaderId", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LeaderId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SnapShotArgs_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LastIncludedIndex", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LastIncludedIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SnapShotArgs_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LastIncludedTerm", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LastIncludedTerm); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SnapShotArgs_) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Log", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Log)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SnapShotArgs_) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Snapshot", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Snapshot)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SnapShotArgs_) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TopicName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TopicName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SnapShotArgs_) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PartName", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PartName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *SnapShotArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnapShotArgs_(%+v)", *p)

}

func (p *SnapShotArgs_) DeepEqual(ano *SnapShotArgs_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	if !p.Field2DeepEqual(ano.LeaderId) {
		return false
	}
	if !p.Field3DeepEqual(ano.LastIncludedIndex) {
		return false
	}
	if !p.Field4DeepEqual(ano.LastIncludedTerm) {
		return false
	}
	if !p.Field5DeepEqual(ano.Log) {
		return false
	}
	if !p.Field6DeepEqual(ano.Snapshot) {
		return false
	}
	if !p.Field7DeepEqual(ano.TopicName) {
		return false
	}
	if !p.Field8DeepEqual(ano.PartName) {
		return false
	}
	return true
}

func (p *SnapShotArgs_) Field1DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}
func (p *SnapShotArgs_) Field2DeepEqual(src int8) bool {

	if p.LeaderId != src {
		return false
	}
	return true
}
func (p *SnapShotArgs_) Field3DeepEqual(src int8) bool {

	if p.LastIncludedIndex != src {
		return false
	}
	return true
}
func (p *SnapShotArgs_) Field4DeepEqual(src int8) bool {

	if p.LastIncludedTerm != src {
		return false
	}
	return true
}
func (p *SnapShotArgs_) Field5DeepEqual(src []byte) bool {

	if bytes.Compare(p.Log, src) != 0 {
		return false
	}
	return true
}
func (p *SnapShotArgs_) Field6DeepEqual(src []byte) bool {

	if bytes.Compare(p.Snapshot, src) != 0 {
		return false
	}
	return true
}
func (p *SnapShotArgs_) Field7DeepEqual(src string) bool {

	if strings.Compare(p.TopicName, src) != 0 {
		return false
	}
	return true
}
func (p *SnapShotArgs_) Field8DeepEqual(src string) bool {

	if strings.Compare(p.PartName, src) != 0 {
		return false
	}
	return true
}

type SnapShotReply struct {
	Term int8 `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
}

func NewSnapShotReply() *SnapShotReply {
	return &SnapShotReply{}
}

func (p *SnapShotReply) InitDefault() {
}

func (p *SnapShotReply) GetTerm() (v int8) {
	return p.Term
}
func (p *SnapShotReply) SetTerm(val int8) {
	p.Term = val
}

var fieldIDToName_SnapShotReply = map[int16]string{
	1: "Term",
}

func (p *SnapShotReply) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SnapShotReply[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SnapShotReply) ReadField1(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Term = _field
	return nil
}

func (p *SnapShotReply) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SnapShotReply"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SnapShotReply) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Term", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Term); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SnapShotReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnapShotReply(%+v)", *p)

}

func (p *SnapShotReply) DeepEqual(ano *SnapShotReply) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Term) {
		return false
	}
	return true
}

func (p *SnapShotReply) Field1DeepEqual(src int8) bool {

	if p.Term != src {
		return false
	}
	return true
}

type Raft_Operations interface {
	RequestVote(ctx context.Context, rep *RequestVoteArgs_) (r *RequestVoteReply, err error)

	AppendEntries(ctx context.Context, rep *AppendEntriesArgs_) (r *AppendEntriesReply, err error)

	SnapShot(ctx context.Context, rep *SnapShotArgs_) (r *SnapShotReply, err error)
}

type Raft_OperationsRequestVoteArgs struct {
	Rep *RequestVoteArgs_ `thrift:"rep,1" frugal:"1,default,RequestVoteArgs_" json:"rep"`
}

func NewRaft_OperationsRequestVoteArgs() *Raft_OperationsRequestVoteArgs {
	return &Raft_OperationsRequestVoteArgs{}
}

func (p *Raft_OperationsRequestVoteArgs) InitDefault() {
}

var Raft_OperationsRequestVoteArgs_Rep_DEFAULT *RequestVoteArgs_

func (p *Raft_OperationsRequestVoteArgs) GetRep() (v *RequestVoteArgs_) {
	if !p.IsSetRep() {
		return Raft_OperationsRequestVoteArgs_Rep_DEFAULT
	}
	return p.Rep
}
func (p *Raft_OperationsRequestVoteArgs) SetRep(val *RequestVoteArgs_) {
	p.Rep = val
}

var fieldIDToName_Raft_OperationsRequestVoteArgs = map[int16]string{
	1: "rep",
}

func (p *Raft_OperationsRequestVoteArgs) IsSetRep() bool {
	return p.Rep != nil
}

func (p *Raft_OperationsRequestVoteArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsRequestVoteArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRequestVoteArgs_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Rep = _field
	return nil
}

func (p *Raft_OperationsRequestVoteArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RequestVote_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("rep", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Rep.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsRequestVoteArgs(%+v)", *p)

}

func (p *Raft_OperationsRequestVoteArgs) DeepEqual(ano *Raft_OperationsRequestVoteArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Rep) {
		return false
	}
	return true
}

func (p *Raft_OperationsRequestVoteArgs) Field1DeepEqual(src *RequestVoteArgs_) bool {

	if !p.Rep.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsRequestVoteResult struct {
	Success *RequestVoteReply `thrift:"success,0,optional" frugal:"0,optional,RequestVoteReply" json:"success,omitempty"`
}

func NewRaft_OperationsRequestVoteResult() *Raft_OperationsRequestVoteResult {
	return &Raft_OperationsRequestVoteResult{}
}

func (p *Raft_OperationsRequestVoteResult) InitDefault() {
}

var Raft_OperationsRequestVoteResult_Success_DEFAULT *RequestVoteReply

func (p *Raft_OperationsRequestVoteResult) GetSuccess() (v *RequestVoteReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsRequestVoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsRequestVoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*RequestVoteReply)
}

var fieldIDToName_Raft_OperationsRequestVoteResult = map[int16]string{
	0: "success",
}

func (p *Raft_OperationsRequestVoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsRequestVoteResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsRequestVoteResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRequestVoteReply()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *Raft_OperationsRequestVoteResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RequestVote_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *Raft_OperationsRequestVoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsRequestVoteResult(%+v)", *p)

}

func (p *Raft_OperationsRequestVoteResult) DeepEqual(ano *Raft_OperationsRequestVoteResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *Raft_OperationsRequestVoteResult) Field0DeepEqual(src *RequestVoteReply) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsAppendEntriesArgs struct {
	Rep *AppendEntriesArgs_ `thrift:"rep,1" frugal:"1,default,AppendEntriesArgs_" json:"rep"`
}

func NewRaft_OperationsAppendEntriesArgs() *Raft_OperationsAppendEntriesArgs {
	return &Raft_OperationsAppendEntriesArgs{}
}

func (p *Raft_OperationsAppendEntriesArgs) InitDefault() {
}

var Raft_OperationsAppendEntriesArgs_Rep_DEFAULT *AppendEntriesArgs_

func (p *Raft_OperationsAppendEntriesArgs) GetRep() (v *AppendEntriesArgs_) {
	if !p.IsSetRep() {
		return Raft_OperationsAppendEntriesArgs_Rep_DEFAULT
	}
	return p.Rep
}
func (p *Raft_OperationsAppendEntriesArgs) SetRep(val *AppendEntriesArgs_) {
	p.Rep = val
}

var fieldIDToName_Raft_OperationsAppendEntriesArgs = map[int16]string{
	1: "rep",
}

func (p *Raft_OperationsAppendEntriesArgs) IsSetRep() bool {
	return p.Rep != nil
}

func (p *Raft_OperationsAppendEntriesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsAppendEntriesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAppendEntriesArgs_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Rep = _field
	return nil
}

func (p *Raft_OperationsAppendEntriesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendEntries_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("rep", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Rep.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsAppendEntriesArgs(%+v)", *p)

}

func (p *Raft_OperationsAppendEntriesArgs) DeepEqual(ano *Raft_OperationsAppendEntriesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Rep) {
		return false
	}
	return true
}

func (p *Raft_OperationsAppendEntriesArgs) Field1DeepEqual(src *AppendEntriesArgs_) bool {

	if !p.Rep.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsAppendEntriesResult struct {
	Success *AppendEntriesReply `thrift:"success,0,optional" frugal:"0,optional,AppendEntriesReply" json:"success,omitempty"`
}

func NewRaft_OperationsAppendEntriesResult() *Raft_OperationsAppendEntriesResult {
	return &Raft_OperationsAppendEntriesResult{}
}

func (p *Raft_OperationsAppendEntriesResult) InitDefault() {
}

var Raft_OperationsAppendEntriesResult_Success_DEFAULT *AppendEntriesReply

func (p *Raft_OperationsAppendEntriesResult) GetSuccess() (v *AppendEntriesReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsAppendEntriesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsAppendEntriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*AppendEntriesReply)
}

var fieldIDToName_Raft_OperationsAppendEntriesResult = map[int16]string{
	0: "success",
}

func (p *Raft_OperationsAppendEntriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsAppendEntriesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsAppendEntriesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAppendEntriesReply()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *Raft_OperationsAppendEntriesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendEntries_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *Raft_OperationsAppendEntriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsAppendEntriesResult(%+v)", *p)

}

func (p *Raft_OperationsAppendEntriesResult) DeepEqual(ano *Raft_OperationsAppendEntriesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *Raft_OperationsAppendEntriesResult) Field0DeepEqual(src *AppendEntriesReply) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsSnapShotArgs struct {
	Rep *SnapShotArgs_ `thrift:"rep,1" frugal:"1,default,SnapShotArgs_" json:"rep"`
}

func NewRaft_OperationsSnapShotArgs() *Raft_OperationsSnapShotArgs {
	return &Raft_OperationsSnapShotArgs{}
}

func (p *Raft_OperationsSnapShotArgs) InitDefault() {
}

var Raft_OperationsSnapShotArgs_Rep_DEFAULT *SnapShotArgs_

func (p *Raft_OperationsSnapShotArgs) GetRep() (v *SnapShotArgs_) {
	if !p.IsSetRep() {
		return Raft_OperationsSnapShotArgs_Rep_DEFAULT
	}
	return p.Rep
}
func (p *Raft_OperationsSnapShotArgs) SetRep(val *SnapShotArgs_) {
	p.Rep = val
}

var fieldIDToName_Raft_OperationsSnapShotArgs = map[int16]string{
	1: "rep",
}

func (p *Raft_OperationsSnapShotArgs) IsSetRep() bool {
	return p.Rep != nil
}

func (p *Raft_OperationsSnapShotArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsSnapShotArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsSnapShotArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSnapShotArgs_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Rep = _field
	return nil
}

func (p *Raft_OperationsSnapShotArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SnapShot_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsSnapShotArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("rep", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Rep.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Raft_OperationsSnapShotArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsSnapShotArgs(%+v)", *p)

}

func (p *Raft_OperationsSnapShotArgs) DeepEqual(ano *Raft_OperationsSnapShotArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Rep) {
		return false
	}
	return true
}

func (p *Raft_OperationsSnapShotArgs) Field1DeepEqual(src *SnapShotArgs_) bool {

	if !p.Rep.DeepEqual(src) {
		return false
	}
	return true
}

type Raft_OperationsSnapShotResult struct {
	Success *SnapShotReply `thrift:"success,0,optional" frugal:"0,optional,SnapShotReply" json:"success,omitempty"`
}

func NewRaft_OperationsSnapShotResult() *Raft_OperationsSnapShotResult {
	return &Raft_OperationsSnapShotResult{}
}

func (p *Raft_OperationsSnapShotResult) InitDefault() {
}

var Raft_OperationsSnapShotResult_Success_DEFAULT *SnapShotReply

func (p *Raft_OperationsSnapShotResult) GetSuccess() (v *SnapShotReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsSnapShotResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsSnapShotResult) SetSuccess(x interface{}) {
	p.Success = x.(*SnapShotReply)
}

var fieldIDToName_Raft_OperationsSnapShotResult = map[int16]string{
	0: "success",
}

func (p *Raft_OperationsSnapShotResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsSnapShotResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Raft_OperationsSnapShotResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Raft_OperationsSnapShotResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSnapShotReply()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *Raft_OperationsSnapShotResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SnapShot_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Raft_OperationsSnapShotResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *Raft_OperationsSnapShotResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsSnapShotResult(%+v)", *p)

}

func (p *Raft_OperationsSnapShotResult) DeepEqual(ano *Raft_OperationsSnapShotResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *Raft_OperationsSnapShotResult) Field0DeepEqual(src *SnapShotReply) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
